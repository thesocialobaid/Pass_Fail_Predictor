# -*- coding: utf-8 -*-
"""Classification_Model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Z72-q8VkbPelv20v7FFSyqNN6RnXbQc1

CLASSIFICATION MODEL FOR STUDENTS


> The following classification model uses supervised machine learning. It
classifies students as likely to "Pass" or "Fail" based on the two simple features which include the StudyHours(how much time they spent)  and the SleepHours ( no of hours for sleeping).

# Importing the libraries
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import random
import joblib
import seaborn as sns  # the Seaborn library is used for data visualization and is built on the top of Matplotlib, making it statistical with minimal code


from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler  # It standardizes features by removing the mean and scaling to unit variance. It transforms the features so we have the mean as 0 and the Standard deviation as 1
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, confusion_matrix # The classification report provides a detailed performance summary of your classification model. It helps evaluate the quality of predictions per class, espicially in imbalanced datasets.
#the confusion matrix conversly gives you the summary of prediction results in a matrix format. It helps diagnose types of errors and can guide threshold tuning and model improvements.

"""# Creating a synthetic DataSet"""

#Dataset generation

random.seed(42)
data = []

for _ in range(300):
  study_hours = round(random.uniform(0,10), 2)
  sleep_hours = round(random.uniform(4,10), 2)


  #Heuristic: if there is more than 5 study hours and between 6-8 hours of sleep then the student is likely to pass

  if study_hours > 5 and 6 <= sleep_hours <=8:
     label = 1
  else:
    label = 0


  data.append([study_hours, sleep_hours, label])

  #Converting the code to the data frame
  df = pd.DataFrame(data, columns=["StudyHours", "SleepHours", "Result"])
  df.head()

"""# Visualizing the DataSet"""

sns.scatterplot(data=df, x="StudyHours", y="SleepHours", hue="Result", palette="coolwarm")
plt.title("Pass/Fail Based on Study & Sleep Hours")
plt.show()

"""# Preparing The Data


> Splitting the data into X and Y


"""

X = df[["StudyHours", "SleepHours"]]
y = df["Result"]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 42 )

"""# Scaling the Features ( FOR ML ALGO OPTIMIZIATION)"""

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

"""# Training a Model through Logistic Regression"""

model = LogisticRegression(class_weight='balanced')
model.fit(X_train_scaled, y_train)

"""# Making Predictions and Evaluating the Model"""

y_pred = model.predict(X_test_scaled)

#Classification report
print(classification_report)

#Confusion Matrix
sns.heatmap(confusion_matrix(y_test, y_pred), annot=True, cmap='Blues', fmt='g')
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

"""# SAVING THE MODEL

"""

joblib.dump(model, 'student_model.pkl')

"""# Testing"""

def predict_result(study_hours, sleep_hours):
  data = scaler.transform([[study_hours, sleep_hours]])
  prediction = model.predict(data)
  return "Pass " if prediciton[0] == 1 else "Fail"


#Example Test
print(predict_result(6.5,7))